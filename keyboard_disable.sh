#!/bin/bash

set -e

UDEV_RULES_FILE="/etc/udev/rules.d/85-keyboard-management.rules"
BACKUP_DIR="$HOME/.keyboard-manager"
SCRIPT_PATH="/usr/local/bin/keyboard-manager"

if [ "$(id -u)" -ne 0 ]; then
    echo "Error: This script requires root privileges."
    echo "Please run with sudo: sudo $0"
    exit 1
fi

mkdir -p "$BACKUP_DIR"

list_keyboards() {
    echo "Detecting connected keyboards..."
    
    keyboards=$(find /sys/class/input/event*/device/name -type f | sort)
    
    if [ -z "$keyboards" ]; then
        echo "No keyboards detected!"
        return 1
    fi
    
    echo "Found keyboards:"
    
    i=1
    declare -a keyboard_paths
    declare -a keyboard_names
    
    for kb in $keyboards; do
        name=$(cat "$kb")
        
        if [[ "$name" == *"mouse"* ]] || [[ "$name" == *"Mouse"* ]]; then
            continue
        fi
        
        echo "$i: $name"
        keyboard_paths[$i]="$kb"
        keyboard_names[$i]="$name"
        ((i++))
    done
    
    return $((i-1))
}

create_udev_rules() {
    local external_keyboard="$1"
    escaped_name=$(echo "$external_keyboard" | sed 's/[\/&]/\\&/g')
    
    cat > "$UDEV_RULES_FILE" << EOF
# Keyboard management rules
# Generated by keyboard-manager script on $(date)
# External keyboard: $external_keyboard

ACTION=="remove", ENV{ID_INPUT_KEYBOARD}=="1", ATTRS{name}=="$escaped_name", RUN+="/bin/sh -c 'printf auto > /sys/bus/serio/devices/serio0/bind_mode' && echo -n serio0 > /sys/bus/serio/drivers/atkbd/bind"

ACTION=="add", ENV{ID_INPUT_KEYBOARD}=="1", ATTRS{name}=="$escaped_name", RUN+="/bin/sh -c 'printf manual > /sys/bus/serio/devices/serio0/bind_mode' && echo -n serio0 > /sys/bus/serio/drivers/atkbd/unbind"
EOF

    echo "Created udev rules file: $UDEV_RULES_FILE"
    echo "External keyboard set to: $external_keyboard"
    
    cp "$UDEV_RULES_FILE" "$BACKUP_DIR/$(date +%Y%m%d%H%M%S)-keyboard-rules.backup"
    
    echo "Reloading udev rules..."
    udevadm control --reload-rules
    udevadm trigger
    
    echo "Rules have been applied!"
}

create_installation_script() {
    cat > "$SCRIPT_PATH" << 'EOF'
#!/bin/bash

set -e

UDEV_RULES_FILE="/etc/udev/rules.d/85-keyboard-management.rules"

if [ "$(id -u)" -ne 0 ]; then
    echo "Error: This script requires root privileges."
    echo "Please run with sudo: sudo $0"
    exit 1
fi

show_help() {
    echo "Keyboard Manager - Usage:"
    echo "  sudo keyboard-manager setup   - Setup external keyboard binding"
    echo "  sudo keyboard-manager remove  - Remove keyboard management rules"
    echo "  sudo keyboard-manager status  - Show current keyboard configuration"
    echo "  sudo keyboard-manager help    - Show this help message"
}

remove_rules() {
    if [ -f "$UDEV_RULES_FILE" ]; then
        echo "Removing keyboard management rules..."
        rm -f "$UDEV_RULES_FILE"
        echo "Rules removed successfully."
        echo "Reloading udev rules..."
        udevadm control --reload-rules
        udevadm trigger
        echo "Ensuring internal keyboard is enabled..."
        if [ -f /sys/bus/serio/devices/serio0/bind_mode ]; then
            printf auto > /sys/bus/serio/devices/serio0/bind_mode
            if [ -f /sys/bus/serio/drivers/atkbd/bind ]; then
                echo -n serio0 > /sys/bus/serio/drivers/atkbd/bind 2>/dev/null || true
            fi
        fi
        echo "Keyboard management disabled."
    else
        echo "No keyboard management rules found."
    fi
}

show_status() {
    echo "Keyboard Manager Status:"
    
    if [ -f "$UDEV_RULES_FILE" ]; then
        echo "Rules are active: $UDEV_RULES_FILE"
        echo "Current rules:"
        grep -v "^#" "$UDEV_RULES_FILE" | sed 's/^/  /'
        external_kb=$(grep "External keyboard:" "$UDEV_RULES_FILE" | cut -d: -f2- | sed 's/^ //')
        if [ -n "$external_kb" ]; then
            echo "External keyboard: $external_kb"
        fi
    else
        echo "No keyboard management rules are active."
    fi
    echo "Currently connected keyboards:"
    for kb in /sys/class/input/event*/device/name; do
        if [ -f "$kb" ]; then
            name=$(cat "$kb")
            if [[ "$name" != *"mouse"* ]] && [[ "$name" != *"Mouse"* ]]; then
                echo "  - $name"
            fi
        fi
    done
    echo "Internal keyboard state:"
    if [ -f /sys/bus/serio/devices/serio0/bind_mode ]; then
        mode=$(cat /sys/bus/serio/devices/serio0/bind_mode)
        if [ "$mode" = "auto" ]; then
            echo "  Enabled (bind_mode: auto)"
        else
            echo "  Disabled (bind_mode: $mode)"
        fi
    else
        echo "  Unknown (bind_mode file not found)"
    fi
}

case "$1" in
    setup)
        echo "Please run the full setup script to configure keyboards."
        echo "Run: sudo bash keyboard-setup.sh"
        ;;
    remove)
        remove_rules
        ;;
    status)
        show_status
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "Unknown command: $1"
        show_help
        exit 1
        ;;
esac
EOF
    chmod +x "$SCRIPT_PATH"
    echo "Created management script: $SCRIPT_PATH"
    echo "You can now use: sudo keyboard-manager [command]"
}

echo "===== Keyboard Management Setup ====="

list_keyboards
kb_count=$?

if [ $kb_count -eq 0 ]; then
    echo "No suitable keyboards found. Exiting."
    exit 1
fi

echo "Which keyboard is your EXTERNAL keyboard?"
read -r kb_selection

if ! [[ "$kb_selection" =~ ^[0-9]+$ ]] || [ "$kb_selection" -lt 1 ] || [ "$kb_selection" -gt $kb_count ]; then
    echo "Invalid selection. Please run the script again."
    exit 1
fi

selected_name="${keyboard_names[$kb_selection]}"
echo "You selected: $selected_name"
read -r confirm
if [[ "$confirm" != [Yy]* ]]; then
    echo "Setup cancelled. Please run the script again."
    exit 1
fi

create_udev_rules "$selected_name"
create_installation_script

echo "Setup complete!"
exit 0
